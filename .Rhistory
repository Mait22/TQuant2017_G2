shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#DATA FITTING
setClass("simulator.aicbic",
slots = c(n.runs = "numeric",
raw.results.aic = "data.frame",
raw.results.bic = "data.frame",
raw.results.rmse = "data.frame",
raw.results.pvaf = "data.frame",
agregated.results.aic = "data.frame",
agregated.results.bic = "data.frame",
agregated.results.rmse = "data.frame",
agregated.results.pvaf = "data.frame"
)
)
simulator_aicbic <- function(n.sims,
n.total,
noise.prop,
a,
b,
c
){
return_object <- new("simulator.aicbic")
#Timepoint and runs per sample
n <- 50
t <- seq(0.1, 8.1, by=2)
#Defining the data generating functions
m.1 <- function(param, t){
(1 + t)^-param[1]
}
m.2 <- function(param, t){
(param[2] + t)^-param[1]
}
m.3 <- function(param, t){
(1 + param[2]*t)^-param[1]
}
#Generating frequencies
yi.1.r <- sapply(t,
function(x){
rbinom(1, n, m.1(a, x))})
yi.2.r <- sapply(t,
function(x){
rbinom(1, n, m.2(c(a, b), x))
})
yi.3.r <- sapply(t,
function(x){
rbinom(1, n, m.3(c(a, b), x))
})
### Likelihoods
loglike.1 <- function(param, data, t){
prob <- m.1(param, t)
prob <- c(prob, 1-prob)
-sum(sapply(data,
function(x)
{lchoose(n, x)}) + data*log(prob))
}
loglike.2 <- function(param, data, t){
prob  <- sapply(t,
function(x){
m.2(param, x)})
prob <- c(prob, 1-prob)
-sum(sapply(data,
function(x)
{lchoose(n, x)}) + data*log(prob))
}
loglike.3 <- function(param, data, t){
prob <- m.3(param, t)
prob <- c(prob, 1-prob)
-sum(sapply(data,
function(x)
{lchoose(n, x)}) + data*log(prob))
}
## maximising likelihood
max.1.r <-  nlm(loglike.1, data=c(yi.1.r, n-yi.1.r), t=t, p=c(0.8))
max.2.r <- nlm(loglike.2, data=c(yi.2.r, n-yi.2.r), t=t, p=c(.8, 0.99))
max.3.r <- nlm(loglike.3, data=c(yi.3.r, n-yi.3.r), t=t, p=c(0.8, 0.5))
data1.r <- data.frame(ID=seq_len(n.total),
time=rep(t, each=n.total/length(t)))
data1.r$prob.m1 <- sapply(data1.r$time,
function(x){
m.1(max.1.r$estimate, x)})
data2.r <- data.frame(ID=seq_len(n.total),
time=rep(t, each=n.total/length(t)))
data2.r$prob.m2 <- sapply(data2.r$time,
function(x){
m.2(max.2.r$estimate, x)})
data3.r <- data.frame(ID=seq_len(n.total),
time=rep(t, each=n.total/length(t)))
data3.r$prob.m3 <- sapply(data3.r$time,
function(x){
m.3(max.3.r$estimate, x)})
bic.new <- function(loglike, nparam, sample){
-2*loglike + nparam*log(sample)
}
aic.new <- function(loglike, nparam){
-2*loglike + 2*nparam
}
rmse <- function(obs, pred){
sqrt(sum((obs - pred)^2) / length(obs))
## or:
# sqrt(mean((obs - pred)^2))
}
pvaf <- function(obs, pred){
1 - (sum((obs - pred)^2) / sum((obs - mean(obs))^2))
}
raw.results.aic <- as.data.frame(matrix(rep(NA, times = 10*n.sims),nrow = n.sims,ncol = 10))
names(raw.results.aic) <- c("Simulation run",
"Data from M1 fitted by M1 (AIC)",
"Data from M1 fitted by M2 (AIC)",
"Data from M1 fitted by M3 (AIC)",
"Data from M2 fitted by M1 (AIC)",
"Data from M2 fitted by M2 (AIC)",
"Data from M2 fitted by M3 (AIC)",
"Data from M3 fitted by M1 (AIC)",
"Data from M3 fitted by M2 (AIC)",
"Data from M3 fitted by M3 (AIC)"
)
raw.results.bic <- as.data.frame(matrix(rep(NA, times = 10*n.sims),nrow = n.sims,ncol = 10))
names(raw.results.bic) <- c("Simulation run",
"Data from M1 fitted by M1 (BIC)",
"Data from M1 fitted by M2 (BIC)",
"Data from M1 fitted by M3 (BIC)",
"Data from M2 fitted by M1 (BIC)",
"Data from M2 fitted by M2 (BIC)",
"Data from M2 fitted by M3 (BIC)",
"Data from M3 fitted by M1 (BIC)",
"Data from M3 fitted by M2 (BIC)",
"Data from M3 fitted by M3 (BIC)"
)
raw.results.rmse <- as.data.frame(matrix(rep(NA, times = 10*n.sims),nrow = n.sims,ncol = 10))
names(raw.results.rmse) <- c("Simulation run",
"Data from M1 fitted by M1 (RMSE)",
"Data from M1 fitted by M2 (RMSE)",
"Data from M1 fitted by M3 (RMSE)",
"Data from M2 fitted by M1 (RMSE)",
"Data from M2 fitted by M2 (RMSE)",
"Data from M2 fitted by M3 (RMSE)",
"Data from M3 fitted by M1 (RMSE)",
"Data from M3 fitted by M2 (RMSE)",
"Data from M3 fitted by M3 (RMSE)"
)
raw.results.pvaf <- as.data.frame(matrix(rep(NA, times = 10*n.sims),nrow = n.sims,ncol = 10))
names(raw.results.pvaf) <- c("Simulation run",
"Data from M1 fitted by M1 (PVAF)",
"Data from M1 fitted by M2 (PVAF)",
"Data from M1 fitted by M3 (PVAF)",
"Data from M2 fitted by M1 (PVAF)",
"Data from M2 fitted by M2 (PVAF)",
"Data from M2 fitted by M3 (PVAF)",
"Data from M3 fitted by M1 (PVAF)",
"Data from M3 fitted by M2 (PVAF)",
"Data from M3 fitted by M3 (PVAF)"
)
## SIMULATION GOES HERE
for(i in c(1:n.sims)){
# #Data from model 1
data1.n <- noise_helper(df = data1.r,noise.prop = noise.prop, col = "prob.m1")
# #Data from model 2
data2.n <- noise_helper(df = data2.r,noise.prop = noise.prop, col = "prob.m2")
#Data from model 3
data3.n <- noise_helper(df = data3.r,noise.prop = noise.prop, col = "prob.m3")
## Estimating parameters from data
#Generating frequencies
yi.1.n <- sapply(data1.n$prob.m1, function(x){rbinom(1, n, x)
})
max.1.m1.n <- nlm(loglike.1, data=c(yi.1.n, n-yi.1.n), t=data1.n$time, p=c(0.8))
max.1.m2.n <- nlm(loglike.2, data=c(yi.1.n, n-yi.1.n), t=data1.n$time, p=c(.8, 0.99))
max.1.m3.n <- nlm(loglike.3, data=c(yi.1.n, n-yi.1.n), t=data1.n$time, p=c(0.8, 0.5))
#PRED 1-1
max.1.m1.n.pred <- data.frame(ID=seq_len(n.total),
time=rep(t, each=n.total/length(data1.n$time)))
max.1.m1.n.pred$prob.m1  <- sapply(max.1.m1.n.pred$time,
function(x){
m.1(max.1.m1.n$estimate, x)})
max.1.m1.n.pred <- sapply(max.1.m1.n.pred$prob.m1, function(x){rbinom(1, n, x)})
#PRED 1-2
max.1.m2.n.pred <- data.frame(ID=seq_len(n.total),
time=rep(t, each=n.total/length(data2.n$time)))
max.1.m2.n.pred$prob.m2  <- sapply(max.1.m2.n.pred$time,
function(x){
m.2(max.1.m2.n$estimate, x)})
max.1.m2.n.pred <- sapply(max.1.m2.n.pred$prob.m2, function(x){rbinom(1, n, x)})
#PRED 1-3
max.1.m3.n.pred <- data.frame(ID=seq_len(n.total),
time=rep(t, each=n.total/length(data3.n$time)))
max.1.m3.n.pred$prob.m3  <- sapply(max.1.m3.n.pred$time,
function(x){
m.3(max.1.m3.n$estimate, x)})
max.1.m3.n.pred <- sapply(max.1.m3.n.pred$prob.m3, function(x){rbinom(1, n, x)})
raw.results.aic[i,"Simulation run"] <- i
raw.results.aic[i,"Data from M1 fitted by M1 (AIC)"] <-  aic.new(loglike = loglike.1(max.1.m1.n$estimate,
data=c(yi.1.n, n-yi.1.n), t = data1.n$time),
nparam = length(max.1.m1.n$estimate))
raw.results.aic[i,"Data from M1 fitted by M2 (AIC)"] <-  aic.new(loglike = loglike.2(max.1.m2.n$estimate,
data=c(yi.1.n, n-yi.1.n), t = data1.n$time),
nparam = length(max.1.m2.n$estimate))
raw.results.aic[i,"Data from M1 fitted by M3 (AIC)"] <-  aic.new(loglike = loglike.3(max.1.m3.n$estimate,
data=c(yi.1.n, n-yi.1.n), t = data1.n$time),
nparam = length(max.1.m3.n$estimate))
raw.results.bic[i,"Simulation run"] <- i
raw.results.bic[i,"Data from M1 fitted by M1 (BIC)"] <-  bic.new(loglike = loglike.1(max.1.m1.n$estimate,
data=c(yi.1.n, n-yi.1.n), t = data1.n$time),
nparam = length(max.1.m1.n$estimate),sample = length(yi.1.n))
raw.results.bic[i,"Data from M1 fitted by M2 (BIC)"] <-  bic.new(loglike = loglike.2(max.1.m2.n$estimate,
data=c(yi.1.n, n-yi.1.n), t = data1.n$time),
nparam = length(max.1.m2.n$estimate),sample = length(yi.1.n))
raw.results.bic[i,"Data from M1 fitted by M3 (BIC)"] <-  bic.new(loglike = loglike.3(max.1.m3.n$estimate,
data=c(yi.1.n, n-yi.1.n), t = data1.n$time),
nparam = length(max.1.m3.n$estimate),sample = length(yi.1.n))
raw.results.rmse[i,"Simulation run"] <- i
raw.results.rmse[i,"Data from M1 fitted by M1 (RMSE)"] <-  rmse(obs = yi.1.n,max.1.m1.n.pred)
raw.results.rmse[i,"Data from M1 fitted by M2 (RMSE)"] <-  rmse(obs = yi.1.n,max.1.m2.n.pred)
raw.results.rmse[i,"Data from M1 fitted by M3 (RMSE)"] <-  rmse(obs = yi.1.n,max.1.m3.n.pred)
raw.results.pvaf[i,"Simulation run"] <- i
raw.results.pvaf[i,"Data from M1 fitted by M1 (PVAF)"] <-  pvaf(obs = yi.1.n,max.1.m1.n.pred)
raw.results.pvaf[i,"Data from M1 fitted by M2 (PVAF)"] <-  pvaf(obs = yi.1.n,max.1.m2.n.pred)
raw.results.pvaf[i,"Data from M1 fitted by M3 (PVAF)"] <-  pvaf(obs = yi.1.n,max.1.m3.n.pred)
yi.2.n <- sapply(data2.n$prob.m2, function(x){rbinom(1, n, x)})
max.2.m1.n <-  nlm(loglike.1, data=c(yi.2.n, n-yi.2.n), t=data2.n$time, p=c(0.8))
max.2.m2.n <- nlm(loglike.2, data=c(yi.2.n, n-yi.2.n), t=data2.n$time, p=c(.8, 0.99))
max.2.m3.n <- nlm(loglike.3, data=c(yi.2.n, n-yi.2.n), t=data2.n$time, p=c(0.8, 0.5))
#PRED 2-1
max.2.m1.n.pred <- data.frame(ID=seq_len(n.total),
time=rep(t, each=n.total/length(data1.n$time)))
max.2.m1.n.pred$prob.m1  <- sapply(max.2.m1.n.pred$time,
function(x){
m.1(max.2.m1.n$estimate, x)})
max.2.m1.n.pred <- sapply(max.2.m1.n.pred$prob.m1, function(x){rbinom(1, n, x)})
# #PRED 2-2
max.2.m2.n.pred <- data.frame(ID=seq_len(n.total),
time=rep(t, each=n.total/length(data2.n$time)))
max.2.m2.n.pred$prob.m2  <- sapply(max.2.m2.n.pred$time,
function(x){
m.2(max.2.m2.n$estimate, x)})
max.2.m2.n.pred <- sapply(max.2.m2.n.pred$prob.m2, function(x){rbinom(1, n, x)})
#PRED 2-3
max.2.m3.n.pred <- data.frame(ID=seq_len(n.total),
time=rep(t, each=n.total/length(data3.n$time)))
max.2.m3.n.pred$prob.m3  <- sapply(max.2.m3.n.pred$time,
function(x){
m.3(max.2.m3.n$estimate, x)})
max.2.m3.n.pred <- sapply(max.2.m3.n.pred$prob.m3, function(x){rbinom(1, n, x)})
raw.results.aic[i,"Data from M2 fitted by M1 (AIC)"] <-  aic.new(loglike = loglike.1(max.2.m1.n$estimate,
data=c(yi.2.n, n-yi.2.n), t = data2.n$time),
nparam = length(max.2.m1.n$estimate))
raw.results.aic[i,"Data from M2 fitted by M2 (AIC)"] <-  aic.new(loglike = loglike.2(max.2.m2.n$estimate,
data=c(yi.2.n, n-yi.2.n), t = data2.n$time),
nparam = length(max.2.m2.n$estimate))
raw.results.aic[i,"Data from M2 fitted by M3 (AIC)"] <-  aic.new(loglike = loglike.3(max.2.m3.n$estimate,
data=c(yi.2.n, n-yi.2.n), t = data2.n$time),
nparam = length(max.2.m3.n$estimate))
raw.results.bic[i,"Data from M2 fitted by M1 (BIC)"] <-  bic.new(loglike = loglike.1(max.2.m1.n$estimate,
data=c(yi.2.n, n-yi.2.n), t = data2.n$time),
nparam = length(max.2.m1.n$estimate),sample = length(yi.2.n))
raw.results.bic[i,"Data from M2 fitted by M2 (BIC)"] <-  bic.new(loglike = loglike.2(max.2.m2.n$estimate,
data=c(yi.2.n, n-yi.2.n), t = data2.n$time),
nparam = length(max.2.m2.n$estimate),sample = length(yi.2.n))
raw.results.bic[i,"Data from M2 fitted by M3 (BIC)"] <-  bic.new(loglike = loglike.3(max.2.m3.n$estimate,
data=c(yi.2.n, n-yi.2.n), t = data2.n$time),
nparam = length(max.2.m3.n$estimate),sample = length(yi.2.n))
raw.results.rmse[i,"Data from M2 fitted by M1 (RMSE)"] <-  rmse(obs = yi.2.n,max.2.m1.n.pred)
raw.results.rmse[i,"Data from M2 fitted by M2 (RMSE)"] <-  rmse(obs = yi.2.n,max.2.m2.n.pred)
raw.results.rmse[i,"Data from M2 fitted by M3 (RMSE)"] <-  rmse(obs = yi.2.n,max.2.m3.n.pred)
raw.results.pvaf[i,"Data from M2 fitted by M1 (PVAF)"] <-  pvaf(obs = yi.2.n,max.2.m1.n.pred)
raw.results.pvaf[i,"Data from M2 fitted by M2 (PVAF)"] <-  pvaf(obs = yi.2.n,max.2.m2.n.pred)
raw.results.pvaf[i,"Data from M2 fitted by M3 (PVAF)"] <-  pvaf(obs = yi.2.n,max.2.m3.n.pred)
yi.3.n <- sapply(data3.n$prob.m3, function(x){rbinom(1, n, x)
})
max.3.m1.n <-  nlm(loglike.1, data=c(yi.3.n, n-yi.3.n), t=data3.n$time, p=c(0.8))
max.3.m2.n <- nlm(loglike.2, data=c(yi.3.n, n-yi.3.n), t=data3.n$time, p=c(.8, 0.99))
max.3.m3.n <- nlm(loglike.3, data=c(yi.3.n, n-yi.3.n), t=data3.n$time, p=c(0.8, 0.5))
#PRED 3-1
max.3.m1.n.pred <- data.frame(ID=seq_len(n.total),
time=rep(t, each=n.total/length(data1.n$time)))
max.3.m1.n.pred$prob.m1  <- sapply(max.3.m1.n.pred$time,
function(x){
m.1(max.3.m1.n$estimate, x)})
max.3.m1.n.pred <- sapply(max.3.m1.n.pred$prob.m1, function(x){rbinom(1, n, x)})
#PRED 3-2
max.3.m2.n.pred <- data.frame(ID=seq_len(n.total),
time=rep(t, each=n.total/length(data2.n$time)))
max.3.m2.n.pred$prob.m2  <- sapply(max.3.m2.n.pred$time,
function(x){
m.2(max.3.m2.n$estimate, x)})
max.3.m2.n.pred <- sapply(max.3.m2.n.pred$prob.m2, function(x){rbinom(1, n, x)})
#PRED 3-3
max.3.m3.n.pred <- data.frame(ID=seq_len(n.total),
time=rep(t, each=n.total/length(data3.n$time)))
max.3.m3.n.pred$prob.m3  <- sapply(max.3.m3.n.pred$time,
function(x){
m.3(max.3.m3.n$estimate, x)})
max.3.m3.n.pred <- sapply(max.3.m3.n.pred$prob.m3, function(x){rbinom(1, n, x)})
raw.results.aic[i,"Data from M3 fitted by M1 (AIC)"] <-  aic.new(loglike = loglike.1(max.3.m1.n$estimate,
data=c(yi.3.n, n-yi.3.n), t = data3.n$time),
nparam = length(max.3.m1.n$estimate))
raw.results.aic[i,"Data from M3 fitted by M2 (AIC)"] <-  aic.new(loglike = loglike.2(max.3.m2.n$estimate,
data=c(yi.3.n, n-yi.3.n), t = data3.n$time),
nparam = length(max.3.m2.n$estimate))
raw.results.aic[i,"Data from M3 fitted by M3 (AIC)"] <-  aic.new(loglike = loglike.3(max.3.m3.n$estimate,
data=c(yi.3.n, n-yi.3.n), t = data3.n$time),
nparam = length(max.3.m3.n$estimate))
raw.results.bic[i,"Data from M3 fitted by M1 (BIC)"] <-  bic.new(loglike = loglike.1(max.3.m1.n$estimate,
data=c(yi.3.n, n-yi.3.n), t = data3.n$time),
nparam = length(max.3.m1.n$estimate),sample = length(yi.3.n))
raw.results.bic[i,"Data from M3 fitted by M2 (BIC)"] <-  bic.new(loglike = loglike.2(max.3.m2.n$estimate,
data=c(yi.3.n, n-yi.3.n), t = data3.n$time),
nparam = length(max.3.m2.n$estimate),sample = length(yi.3.n))
raw.results.bic[i,"Data from M3 fitted by M3 (BIC)"] <-  bic.new(loglike = loglike.3(max.3.m3.n$estimate,
data=c(yi.3.n, n-yi.3.n), t = data3.n$time),
nparam = length(max.3.m3.n$estimate),sample = length(yi.3.n))
raw.results.rmse[i,"Data from M3 fitted by M1 (RMSE)"] <-  rmse(obs = yi.3.n,max.3.m1.n.pred)
raw.results.rmse[i,"Data from M3 fitted by M2 (RMSE)"] <-  rmse(obs = yi.3.n,max.3.m2.n.pred)
raw.results.rmse[i,"Data from M3 fitted by M3 (RMSE)"] <-  rmse(obs = yi.3.n,max.3.m3.n.pred)
raw.results.pvaf[i,"Data from M3 fitted by M1 (PVAF)"] <-  pvaf(obs = yi.3.n,max.3.m1.n.pred)
raw.results.pvaf[i,"Data from M3 fitted by M2 (PVAF)"] <-  pvaf(obs = yi.3.n,max.3.m2.n.pred)
raw.results.pvaf[i,"Data from M3 fitted by M3 (PVAF)"] <-  pvaf(obs = yi.3.n,max.3.m3.n.pred)
}
return_object@raw.results.aic <- raw.results.aic
return_object@raw.results.bic <- raw.results.bic
return_object@raw.results.rmse <- raw.results.rmse
return_object@raw.results.pvaf <- raw.results.pvaf
return(return_object)
}
simulator_aicbic(n.sims = 10,n.total = 100,noise.prop = 0.1,a = 1,b = 2,c = 3)
